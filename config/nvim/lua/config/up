local map = require('config.utils').map
local utils = require('config.utils')

vim.g.mapleader = ' '

map(
  'n',
  '<leader>r',
  '<cmd>w<cr><cmd>so<cr><cmd>echo "source" bufname("%")<cr>',
  { desc = 'Reload config file' }
)

map(
  'n',
  '<f1>',
  function()
    local word = vim.fn.expand('<cword>')
    vim.cmd('help ' .. word)
  end,
  { desc = 'Help for current word' }
)

map(
  'i',
  'kj',
  '<esc>',
  { desc = 'Return to normal mode' }
)

map(
  'v',
  'รง',
  '<esc>',
  { desc = 'Return to normal mode' }
)

map(
  'v',
  '<leader>kj',
  '<esc>',
  { desc = 'Return to normal mode' }
)

map(
  'i',
  '<c-h>',
  '<left>',
  { desc = 'Go left in insert mode' }
)

map(
  'i',
  '<c-l>',
  '<right>',
  { desc = 'Go right in insert mode' }
)

map(
  'i',
  '<c-v>',
  '<c-r>"',
  { desc = 'Paste register' }
)


map(
  'n',
  'j',
  'gj',
  { desc = 'Ignore wordwrap jumpline' }
)

map(
  'n',
  'k',
  'gk',
  { desc = 'Ignore wordwrap jumpline' }
)

map(
  'n',
  'Y',
  'y$',
  { desc = 'Like C and D' }
)

map(
  {'n', 'v'},
  'L', 'g_',
  { desc = 'Go to end line' }
)

map(
  {'n', 'v'},
  'H', '^',
  { desc = 'Go to begin line' }
)

map(
  {'n', 'v' },
  'J', '5j',
  { desc = 'Jump 5 line to down' }
)

map(
  {'n', 'v'},
  'K', '5k',
  { desc = 'Jump 5 line to up' }
)

map(
  'n',
  '<c-d>',
  '<c-d>zz',
  { desc = 'Maintain cursor in the middle screen' }
)

map(
  'n',
  '<c-u>',
  '<c-u>zz',
  { desc = 'Maintain cursor in the middle screen' }
)

map(
  'n',
  '<c-i>',
  '<c-i>zz',
  { desc = 'Maintain cursor in the middle screen' }
)

map(
  'n',
  '<c-o>',
  '<c-o>zz',
  { desc = 'Maintain cursor in the middle screen' }
)

map(
  'n',
  '{',
  '{zz',
  { desc = 'Maintain cursor in the middle screen' }
)

map(
  'n',
  '}',
  '}zz',
  { desc = 'Maintain cursor in the middle screen' }
)

map(
  'n',
  '*',
  '*zz',
  { desc = 'Maintain cursor in the middle screen' }
)

map(
  'n',
  '#',
  '#zz',
  { desc = 'Maintain cursor in the middle screen' }
)

map(
  {'n', 'x'},
  'c', '"_c',
  { desc = 'Change text without putting it into register' }
)

map(
  'n',
  'C',
  '"_C',
  { desc = 'Change aborve cursor without putting it into register' }
)

map(
  'n',
  'cc',
  '"_cc',
  { desc = 'Change line without putting it into register' }
)

map(
  'n',
  '<leader>o',
  'm`o<esc>``',
  { desc = 'Add new line in normal mode' }
)

map(
  'n',
  '<leader>O',
  'm`O<esc>``',
  { desc = 'Add new line in normal mode' }
)

map(
  'n',
  '=',
  '<c-a>',
  { desc = 'Incrase number' }
)

map(
  'n',
  '-',
  '<c-x>',
  { desc = 'Decrease number' }
)

map(
  'n',
  '<leader>a',
  'G<s-v>gg',
  { desc = 'Select all text' }
)

map(
  'n',
  'U',
  '<c-r>',
  { desc = 'Redo' }
)

-- Mark

map(
  'n',
  'm',
  '`',
  { desc = 'Go to mark' }
)

map(
  'n',
  'M',
  'm',
  { desc = 'Create mark' }
)

-- Register

map(
  'n',
  "'",
  '"',
  { desc = 'Create register' }
)

map(
  'v',
  "'",
  '"',
  { desc = 'Create register' }
)

-- Clipboard

map(
  'v',
  '<leader>y',
  '"+ygv<esc><cmd>echo "Copy to clipboard"<cr>',
  { desc = 'Yanki selectted line to clipboard' }
)

map(
  'n',
  '<leader>y',
  '"+yy<cmd>echo "Copy line to clipboard"<cr>',
  { desc = 'Yank current line to clipboard' }
)

map(
  'n',
  'yl',
  '"+yy<cmd>echo "Copy line to clipboard"<cr>',
  { desc = 'Yank current line to clipboard' }
)

map(
  'n',
  'ya',
  '<cmd>%y+<cr><cmd>echo "Copy all content to clipboard"<cr>',
  { desc = 'Copy all content to clipboard' }
)

map(
  'x',
  'p',
  '"0p',
  { desc = 'Register not change on paste' }
)

map(
  'n',
  '<leader>d',
  '^vg_"+x<esc><cmd>echo "Cut line to clipboard"<cr>',
  { desc = 'Delete to clipboard' }
)

map(
  'v',
  '<leader>d',
  '"+x<cmd>echo "Cut to clipboard"<cr>',
  { desc = 'Cut to clipboard' }
)

map(
  'n',
  '<leader>p',
  '"+gp<esc><cmd>echo "Paste from clipboard"<cr>',
  { desc = 'Paste from clipboard' }
)

map(
  'n',
  '<leader>P',
  'o<esc>"+gp<esc><cmd>echo "Paste from clipboard in new line"<cr>',
  { desc = 'Paste from clipboard in new line' }
)

map(
  'v',
  '<leader>p',
  'c<esc>"+gp<esc><cmd>echo "Paste from clipboard"<cr>',
  { desc = 'Paste from clipboard' }
)

map(
  'v',
  '<leader>P',
  'D"+gp<esc><cmd>echo "Paste from clipboard"<cr>',
  { desc = 'Paste from clipboard' }
)

map(
  'n',
  '<leader>j',
  'mzJ`z',
  { desc = 'Join lines' }
)

map(
  'n',
  'x',
  '"_x',
  { desc = 'Delete not copy' }
)

map(
  'n',
  '<del>',
  '"_x',
  { desc = 'Delete not copy' }
)


map(
  'n',
  '<c-a-j>',
  '<cmd>m .+1<cr>',
  { desc = 'Move line to down' }
)

map(
  'n',
  '<c-a-k>',
  '<cmd>m .-2<cr>',
  { desc = 'Move line to up' }
)

map(
  'i',
  '<c-a-j>',
  '<esc><cmd>m .+1<cr>==gi',
  { desc = 'Move line to down' }
)

map(
  'i',
  '<c-a-k>',
  '<esc><cmd>m .-2<cr>==gi',
  { desc = 'Move line to up' }
)

map(
  'v',
  '<c-a-j>',
  ":m '>+1<cr>gv=gv",
  { desc = 'Move select line(s) to down' }
)

map(
  'v',
  '<c-a-k>',
  ":m '<-2<cr>gv=gv",
  { desc = 'Move select line(s) to up' }
)

-- Move and clone line(s)

map(
  'n',
  '<c-s-a-j>',
  'yyp',
  { desc = 'Clone line to down' }
)

map(
  'n',
  '<c-s-a-k>',
  'yyP',
  { desc = 'Clone line to up' }
)

map(
  'i',
  '<c-s-a-j>',
  '<esc>yypi',
  { desc = 'Clone line down' }
)

map(
  'i',
  '<c-s-a-k>',
  '<esc>yyPi',
  { desc = 'Clone line up' }
)

map(
  'v',
  '<c-s-a-j>',
  ":'<,'>copy '><cr>",
  { desc = 'Clone select line(s) down' }
)

map(
  'v',
  '<c-s-a-k>',
  'ygvO<esc>P',
  { desc = 'Clone select line(s) up' }
)

map(
  'v',
  'y',
  'ygv<esc>',
  { desc = 'Keep cursor end select when visual copy' }
)

-- Substitute

map(
  'n',
  '<leader>s',
  function()
    local cmd = ':%s/<C-r><C-w>//g<Left><Left>'
    local keys = vim.api.nvim_replace_termcodes(cmd, true, false, true)
    vim.api.nvim_feedkeys(keys, 'n', false)
  end,
  { desc = 'Substitute current word' }
)

-- Searching and replace

map(
  {'n', 'i'},
  '<esc>', '<cmd>noh<cr><esc>',
  { desc = 'Remove highlight' }
)

map(
  'n',
  'รง',
  '<cmd>noh<cr>',
  { desc = 'Remove highlight' }
)

map(
  'n',
  '<leader>R',
  ':%s/<c-r><c-w>//g<left><left>',
  { desc = 'Replace word in cursor' }
)

map(
  'v',
  '<leader>r',
  '"hy:%s/<c-r>h//g<left><left>',
  { desc = 'Replace selected' }
)

map(
  'v',
  '<leader>R',
  ':s/<c-r><c-w>/<c-r>+/<cr>e',
  { desc = 'Replace select to clipboard and keep cursor' }
)

map(
  'n',
  'n',
  'nzzzv',
  { desc = 'Keep next result centred' }
)

map(
  'n',
  'N',
  'Nzzzv',
  { desc = 'Keep prev result centred' }
)

map(
  'v',
  'y',
  'ygv<esc>',
  { desc = 'Stop copy in last char' }
)

-- Indent

map(
  'n',
  '>',
  '>>',
  { desc = 'Add indent' }
)

map(
  'n',
  '<',
  '<<',
  { desc = 'Remove indent' }
)

map(
  'v',
  '>',
  '>gv',
  { desc = 'Add indent' }
)

map(
  'v',
  '<',
  '<gv',
  { desc = 'Remove indent' }
)

-- Buffer

map(
  'n',
  '<leader>n',
  '<cmd>ene<cr>',
  { desc = 'Buffer new' }
)

-- map(
--   'n',
--   '<leader>bn',
--   '<cmd>ene<cr>',
--   { desc = 'Buffer new' }
-- )

map(
  'n',
  '<leader>w',
  '<cmd>bd<cr>',
  { desc = 'Buffer delete' }
)

map(
  'n',
  '<leader>bd',
  '<cmd>bd<cr>',
  { desc = 'Buffer delete' }
)

map(
  'n',
  '<leader>bc',
  '<cmd>bd<cr>',
  { desc = 'Belete close' }
)

map(
  'n',
  '<leader>bn',
  '<cmd>bn<cr>',
  { desc = 'Buffer next' }
)

map(
  'n',
  '<leader>bp',
  '<cmd>bp<cr>',
  { desc = 'Buffer prev' }
)

map(
  'n',
  '<leader>bl',
  '<cmd>bn<cr>',
  { desc = 'Buffer next' }
)

map(
  'n',
  '<leader>bh',
  '<cmd>bp<cr>',
  { desc = 'Buffer prev' }
)

map(
  'n',
  '<tab>',
  '<cmd>bn<cr>',
  { desc = 'Buffer next' }
)

map(
  'n',
  '<s-tab>',
  '<cmd>bp<cr>',
  { desc = 'Buffer prev' }
)

map(
  'n',
  '<leader>bo',
  '<cmd>BufOnly<cr>',
  { desc = 'Keep just current buffer' }
)

map(
  'n',
  '<leader>by',
  '<cmd>%y+<cr><cmd>echo "Copy all content to clipboard"<cr>',
  { desc = 'Buffer yank' }
)

map(
  'n',
  '<leader>bu',
  function() vim.cmd('update') end,
  { desc = 'Buffer :update' }
)

-- Split window

map(
  'n',
  'ss',
  '<cmd>sp<cr><c-w>k<cmd>bp<cr>',
  { desc = 'Split' }
)

map(
  'n',
  'vv',
  '<cmd>vsp<cr><c-w>h<cmd>bp<cr>',
  { desc = 'Split vertical' }
)

-- Navigation panes

map(
  'n',
  '<a-h>',
  '<c-w>h',
  { desc = 'Go left window' }
)

map(
  'n',
  '<a-j>',
  '<c-w>j',
  { desc = 'Go dow window' }
)

map(
  'n',
  '<a-k>',
  '<c-w>k',
  { desc = 'Go up window' }
)

map(
  'n',
  '<a-l>',
  '<c-w>l',
  { desc = 'Go right window' }
)

-- tmux

map(
  'n',
  '<a-h>',
  '<cmd>TmuxNavigateLeft<cr>',
  { desc = 'Tmux go left' }
)

map(
  'n',
  '<a-j>',
  '<cmd>TmuxNavigateDown<cr>',
  { desc = 'Tmux go down' }
)

map(
  'n',
  '<a-k>',
  '<cmd>TmuxNavigateUp<cr>',
  { desc = 'Tmux go up' }
)

map(
  'n',
  '<a-l>',
  '<cmd>TmuxNavigateRight<cr>',
  { desc = 'Tmux go right' }
)

-- Resize Window

map(
  'n',
  '<up>',
  '<cmd>resize +2<cr>',
  { desc = 'Resize height taller' }
)

map(
  'n',
  '<down>',
  '<cmd>resize -2<cr>',
  { desc = 'Resize height shorter' }
)

map(
  'n',
  '<left>',
  '<cmd>vertical resize +2<cr>',
  { desc = 'Resize height left' }
)

map(
  'n',
  '<right>',
  '<cmd>vertical resize -2<cr>',
  { desc = 'Resize height right' }
)

-- Auto-complete

map(
  'n',
  '<c-k>',
  '<cmd>cnext<cr>zz',
  { desc = 'Next item' }
)

map(
  'n',
  '<c-j>',
  '<cmd>cprev<cr>zz',
  { desc = 'Prev item' }
)

-- Menu

map(
  'i',
  '<c-space>',
  '<c-n>',
  { desc = 'Show menu' }
)

map(
  {'i', 'c'},
  '<c-j>',
  'pumvisible() ? "\\<c-n>" : "\\<c-j>"',
  { desc = 'Next item', expr = true }
)

map(
  {'i', 'c'},
  'pumvisible<c-k>',
  'pumvisible() ? "\\<c-p>" : "\\<c-k>"',
  { desc = 'Prev item', expr = true }
)

map(
  {'i', 'c'},
  '<c-c>',
  'pumvisible() ? "\\<c-e>" : "\\<c-c>"',
  { desc= "Close menu", expr = true }
)

-- In command mode (not working)

map(
  'c',
  '<c-a>',
  '<home>',
  { desc = 'Beginner of line' }
)

map(
  'c',
  '<c-e>',
  '<end>',
  { desc = 'End of line' }
)

map(
  'n',
  '<leader>x',
  '<cmd>!chmod +x %<cr>',
  { desc = 'Make file executable' }
)

map(
  {'n', 'i', 'v'},
  '<c-s>',
  '<cmd>w! up<cr><esc>',
  {
    desc = 'Save file',
    silent = false
  }
)

map(
  'n',
  '<leader>q',
  '<cmd>q<cr>',
  { desc = 'Quit' }
)

map(
  'n',
  '<leader>Q',
  '<cmd>qa!<cr>',
  { desc = 'Quit all' }
)

map(
  {'n', 'i'},
  '<c-;>',
  function() utils.toggle_comment_line() end,
  { desc = 'Comment line' }
)

map(
  'n',
  '<leader>uc',
  function() utils.toggle_cmdheight() end,
  { desc = 'Toggle cmd height' }
)

map(
  'n',
  '<leader>ui',
  function() utils.toggle_ia() end,
  { desc = 'Toggle IA' }
)

map(
  'n',
  '<leader>uk',
  '<cmd>WhichKey<cr>',
  { desc = 'Active WhichKey' }
)

map(
  'n',
  '<leader>un',
  function() utils.toggle_number() end,
  { desc = 'Toggle line number', }
)

map(
  'n',
  '<leader>ur',
  function() utils.toggle_relativenumber() end,
  { desc = 'Toggle relative number', }
)

map(
  'n',
  '<leader>us',
  function() utils.toggle_spell() end,
  { desc = 'Toggle spell' }
)

map(
  'n',
  '<leader>uw',
  function() utils.toggle_wrap() end,
  { desc = 'Toggle wrap' }
)

map(
  'n',
  '<leader>uz',
  '<cmd>set wrap<cr> <cmd>set linebreak<cr> <cmd>ZenMode<cr>',
  { desc = 'Toggle ZenMode' }
)

------------------------------------------------------------
-- LSP
------------------------------------------------------------

map(
  'n',
  '<leader>fm',
  function() vim.lsp.buf.format { async = true } end,
  { desc = 'LSP formatting' }
)

map(
  'n',
  'gd',
  function() vim.lsp.buf.declaration() end,
  { desc = 'Go definition' }
)

map(
  'n',
  'gD',
  function() vim.lsp.buf.definition() end,
  { desc = 'Go declaration' }
)

map(
  'n',
  'gi',
  function() vim.lsp.buf.implementation() end,
  { desc = 'Go declaration' }
)

map(
  'n',
  'gK',
  function() vim.lsp.buf.hover() end,
  { desc = 'Hover definition' }
)

map(
  'n',
  ']d',
  function() vim.diagnostic.goto_next() end,
  { desc = 'Next diagnostic' }
)

map(
  'n',
  '[d',
  function() vim.diagnostic.goto_prev() end,
  { desc = 'Prev diagnostic' }
)

------------------------------------------------------------
-- Plugins
------------------------------------------------------------

-- lazy
map(
  'n',
  '<leader><leader>p',
  '<cmd>Lazy<cr>',
  { desc = 'Lazy' }
)

-- nvim-tree
if vim.fn.exists(':NvimTreeToggle') then
  map(
    'n',
    '<leader>e',
    '<cmd>NvimTreeToggle<cr>',
    { desc = 'NvimTree' }
  )
else
  map(
    'n',
    '<leader>e',
    '<cmd>15Lex<cr>',
    { desc = 'Lex' }
  )
end

-- oil
map(
  'n',
  '<leader>E',
  '<cmd>lua require("oil").toggle_float()<cr>',
  { desc = 'Oil' }
)

-- telescope
map(
  'n',
  '<c-p>',
  '<cmd>Telescope file_browser<cr>',
  { desc = 'Files' }
)

map(
  'n',
  '<leader>fa',
  '<cmd>Telescope find_files follow=true no_ignore=true hidden=true<cr>',
  { desc = 'Files with hidden' }
)

map(
  'n',
  '<leader>fc',
  '<cmd>HopChar1<cr>',
  { desc = 'Char' }
)

map(
  'n',
  '<leader>fb',
  '<cmd>Telescope buffers<cr>',
  { desc = 'Buffers' }
)

map(
  'n',
  '<leader>fC',
  '<cmd>Telescope commands<cr>',
  { desc = 'Commands' }
)

map(
  'n',
  '<leader>ff',
  '<cmd>Telescope file_browser<cr>',
  { desc = 'Files browser' }
)

map(
  'n',
  '<leader>fF',
  '<cmd>Telescope find_files<cr>',
  { desc = 'Files' }
)

map(
  'n',
  '<leader>fg',
  '<cmd>Telescope git_files<cr>',
  { desc = 'Git files' }
)

-- map(
--   'n',
--   '<leader>fgb',
--   '<cmd>Telescope git_branches<cr>',
--   { desc = '' }
-- )
--
-- map(
--   'n',
--   '<leader>fgc',
--   '<cmd>Telescope git_commits<cr>',
--   { desc = '' }
-- )
--
-- map(
--   'n',
--   '<leader>fgs',
--   '<cmd>Telescope git_status<cr>',
--   { desc = '' }
-- )
--
map(
  'n',
  '<leader>fh',
  '<cmd>Telescope highlights<cr>',
  { desc = 'Highlights' }
)

map(
  'n',
  '<leader>fH',
  '<cmd>Telescope help_tags<cr>',
  { desc = 'Help' }
)

map(
  'n',
  '<leader>fk',
  '<cmd>Telescope keymaps<cr>',
  { desc = 'Keymaps' }
)

map(
  'n',
  '<leader>fl',
  '<cmd>Telescope live_grep<cr>',
  { desc = 'Live grep' }
)

map(
  'n',
  '<leader>fm',
  '<cmd>Telescope marks<cr>',
  { desc = 'Marks' }
)

map(
  'n',
  '<leader>ft',
  '<cmd>Telescope filetypes<cr>',
  { desc = 'File types' }
)

map(
  'n',
  '<leader>fo',
  '<cmd>Telescope oldfiles<cr>',
  { desc = 'Old files' }
)

map(
  'n',
  '<leader>fO',
  '<cmd>Telescope vim_options<cr>',
  { desc = 'Options' }
)

map(
  'n',
  '<leader>fz',
  '<cmd>Telescope current_buffer_fuzzy_find<cr>',
  { desc = 'Fuzzy' }
)

-- zen mode
map(
  'n',
  '<leader>z',
  '<cmd>set wrap<cr> <cmd>set linebreak<cr> <cmd>ZenMode<cr>',
  { desc = 'ZenMode' }
)

-- References
-- https://github.com/NvChad
-- https://github.com/LazyVim/LazyVim
-- https://github.com/LunarVim/LunarVim
-- https://github.com/AstroNvim/AstroNvim
-- https://bitbucket.org/sergio/mylazy-nvim
-- https://stackoverflow.com/questions/18948491/running-python-code-in-vim
-- https://github.com/jdhao/nvim-config/blob/fc144e08957c39954927ae1f48ce70d8b464d258/core/mappings.lua
